//
//  APIClient.swift
//  InspectorMines
//
//  Created by Seif Kobrosly on 5/29/22.
//  Copyright Â© 2022 Apptitude Labs LLC. All rights reserved.
//

import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif
import Get
import os.log

struct Credentials: Equatable, Hashable {
    let apiKey: String
    let environment: Environment
}

public enum Environment: Equatable, Hashable, Codable {

    case dev
    case sandbox
    case production

    var host: String {
      switch self {
      case .dev:
          return "http://127.0.0.1:1111"
      case .sandbox:
          return "http://127.0.0.1:1111"
      case .production:
          return "http://localhost:8080"
      }
    }

    var name: String {
      switch self {
        case .dev:
          return "dev"
        case .sandbox:
          return "sandbox"
        case .production:
          return "production"
      }
    }
}


public class InspectorMinesClient {

  private let configuration: Configuration

  var logger: Logger? = nil
  var userId: UUID?
  let apiClient: APIClient
  
  let environment: Environment
  let dateFormatter = ISO8601DateFormatter()

  public static var shared: InspectorMinesClient {
    guard let client = Self.client else {
      fatalError("`VitalClient` hasn't been configured.")
    }

    return client
  }

  private static var client: InspectorMinesClient?

  public static func configure(
    apiKey: String,
    environment: Environment,
    configuration: Configuration = .init()
  ) {
    let client = InspectorMinesClient(
      apiKey: apiKey,
      environment: environment,
      configuration: configuration
    )

    Self.client = client
  }

  public static var isSetup: Bool {
    Self.client != nil && Self.client?.userId != nil
  }

  public static func setUserId(_ userId: UUID) {
    InspectorMinesClient.shared.userId = userId
  }

  public init(
    apiKey: String,
    environment: Environment,
    configuration: Configuration,
    apiVersion: String = "v1"
  ) {
    self.environment = environment
    self.configuration = configuration

    if configuration.logsEnable {
      self.logger = Logger(subsystem: "vital", category: "inspector-network-client")
    }

    self.logger?.info("VitalClient setup for environment \(String(describing: environment))")

    let apiClientDelegate = InspectorMinesClientDelegate(
      environment: environment,
      logger: logger,
      apiKey: apiKey
    )

    self.apiClient = APIClient(baseURL: URL(string: environment.host)!) { configuration in
      configuration.delegate = apiClientDelegate

      let encoder = JSONEncoder()
      encoder.dateEncodingStrategy = .iso8601
      encoder.keyEncodingStrategy = .convertToSnakeCase

      let decoder = JSONDecoder()
      decoder.keyDecodingStrategy = .convertFromSnakeCase
      decoder.dateDecodingStrategy = .iso8601

      configuration.encoder = encoder
      configuration.decoder = decoder
    }
  }
}

public extension InspectorMinesClient {
  struct Configuration {
    public let logsEnable: Bool

    public init(
      logsEnable: Bool = true
    ) {
      self.logsEnable = logsEnable
    }
  }
}
